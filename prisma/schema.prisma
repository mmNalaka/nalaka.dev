datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum role {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          role      @default(USER)
  Post          Post[]
  Comment       Comment[]
  Snippet       Snippet[]
  Project       Project[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  PublishedAt DateTime?
  published   Boolean    @default(false)
  title       String
  slug        String     @unique
  content     String?
  excerpt     String?
  views       Int        @default(0)
  thumbnail   String?
  cover       String?
  author      User?      @relation(fields: [authorId], references: [id])
  authorId    String?
  tags        Tag[]
  categories  Category[]
  comments    Comment[]

  @@map("posts")
}

model Tag {
  id        String   @id
  createdAt DateTime @default(now())
  posts     Post[]
  snippet   Snippet? @relation(fields: [snippetId], references: [id])
  snippetId String?
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  @@map("tags")
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  posts     Post[]

  @@map("categories")
}

model Comment {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  content   String
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?
  post      Post?     @relation(fields: [postId], references: [id])
  postId    String?
  parent    Comment?  @relation("ChildComment", fields: [parentId], references: [id])
  parentId  String?
  comments  Comment[] @relation("ChildComment")
  snippet   Snippet?  @relation(fields: [snippetId], references: [id])
  snippetId String?

  @@map("comments")
}

model Snippet {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String
  slug      String    @unique
  content   String?
  language  String?
  views     Int       @default(0)
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?
  tags      Tag[]
  comments  Comment[]

  @@map("snippets")
}

model Project {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  slug        String   @unique
  description String?
  thumbnail   String?
  cover       String?
  url         String?
  tags        Tag[]
  author      User?    @relation(fields: [authorId], references: [id])
  authorId    String?

  @@map("projects")
}
